// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: audio/v1/audio.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Audio_V1_AudioType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unspecified // = 0
  case input // = 1
  case output // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unspecified
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unspecified
    case 1: self = .input
    case 2: self = .output
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unspecified: return 0
    case .input: return 1
    case .output: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Audio_V1_AudioType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Audio_V1_AudioType] = [
    .unspecified,
    .input,
    .output,
  ]
}

#endif  // swift(>=4.2)

struct Audio_V1_StreamAudioRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var audioType: Audio_V1_AudioType = .unspecified

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Audio_V1_StreamAudioResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// PCM chunk
  var data: [Float] = []

  var sampleRate: Int32 = 0

  var bitDepth: Int32 = 0

  var channels: Int32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Audio_V1_AudioType: @unchecked Sendable {}
extension Audio_V1_StreamAudioRequest: @unchecked Sendable {}
extension Audio_V1_StreamAudioResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "audio.v1"

extension Audio_V1_AudioType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AUDIO_TYPE_UNSPECIFIED"),
    1: .same(proto: "AUDIO_TYPE_INPUT"),
    2: .same(proto: "AUDIO_TYPE_OUTPUT"),
  ]
}

extension Audio_V1_StreamAudioRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StreamAudioRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "audio_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.audioType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.audioType != .unspecified {
      try visitor.visitSingularEnumField(value: self.audioType, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Audio_V1_StreamAudioRequest, rhs: Audio_V1_StreamAudioRequest) -> Bool {
    if lhs.audioType != rhs.audioType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Audio_V1_StreamAudioResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".StreamAudioResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .standard(proto: "sample_rate"),
    3: .standard(proto: "bit_depth"),
    4: .same(proto: "channels"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedFloatField(value: &self.data) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.sampleRate) }()
      case 3: try { try decoder.decodeSingularInt32Field(value: &self.bitDepth) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.channels) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitPackedFloatField(value: self.data, fieldNumber: 1)
    }
    if self.sampleRate != 0 {
      try visitor.visitSingularInt32Field(value: self.sampleRate, fieldNumber: 2)
    }
    if self.bitDepth != 0 {
      try visitor.visitSingularInt32Field(value: self.bitDepth, fieldNumber: 3)
    }
    if self.channels != 0 {
      try visitor.visitSingularInt32Field(value: self.channels, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Audio_V1_StreamAudioResponse, rhs: Audio_V1_StreamAudioResponse) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.sampleRate != rhs.sampleRate {return false}
    if lhs.bitDepth != rhs.bitDepth {return false}
    if lhs.channels != rhs.channels {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
