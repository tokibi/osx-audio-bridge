//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: audio/v1/audio.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Audio_V1_AudioServiceClient`, then call methods of this protocol to make API calls.
internal protocol Audio_V1_AudioServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Audio_V1_AudioServiceClientInterceptorFactoryProtocol? { get }

  func streamAudio(
    _ request: Audio_V1_StreamAudioRequest,
    callOptions: CallOptions?,
    handler: @escaping (Audio_V1_StreamAudioResponse) -> Void
  ) -> ServerStreamingCall<Audio_V1_StreamAudioRequest, Audio_V1_StreamAudioResponse>
}

extension Audio_V1_AudioServiceClientProtocol {
  internal var serviceName: String {
    return "audio.v1.AudioService"
  }

  /// Server streaming call to StreamAudio
  ///
  /// - Parameters:
  ///   - request: Request to send to StreamAudio.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func streamAudio(
    _ request: Audio_V1_StreamAudioRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Audio_V1_StreamAudioResponse) -> Void
  ) -> ServerStreamingCall<Audio_V1_StreamAudioRequest, Audio_V1_StreamAudioResponse> {
    return self.makeServerStreamingCall(
      path: Audio_V1_AudioServiceClientMetadata.Methods.streamAudio.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamAudioInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension Audio_V1_AudioServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Audio_V1_AudioServiceNIOClient")
internal final class Audio_V1_AudioServiceClient: Audio_V1_AudioServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Audio_V1_AudioServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Audio_V1_AudioServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the audio.v1.AudioService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Audio_V1_AudioServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Audio_V1_AudioServiceNIOClient: Audio_V1_AudioServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Audio_V1_AudioServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the audio.v1.AudioService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Audio_V1_AudioServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Audio_V1_AudioServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Audio_V1_AudioServiceClientInterceptorFactoryProtocol? { get }

  func makeStreamAudioCall(
    _ request: Audio_V1_StreamAudioRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Audio_V1_StreamAudioRequest, Audio_V1_StreamAudioResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Audio_V1_AudioServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Audio_V1_AudioServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Audio_V1_AudioServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeStreamAudioCall(
    _ request: Audio_V1_StreamAudioRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Audio_V1_StreamAudioRequest, Audio_V1_StreamAudioResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Audio_V1_AudioServiceClientMetadata.Methods.streamAudio.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamAudioInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Audio_V1_AudioServiceAsyncClientProtocol {
  internal func streamAudio(
    _ request: Audio_V1_StreamAudioRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Audio_V1_StreamAudioResponse> {
    return self.performAsyncServerStreamingCall(
      path: Audio_V1_AudioServiceClientMetadata.Methods.streamAudio.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStreamAudioInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Audio_V1_AudioServiceAsyncClient: Audio_V1_AudioServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Audio_V1_AudioServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Audio_V1_AudioServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Audio_V1_AudioServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'streamAudio'.
  func makeStreamAudioInterceptors() -> [ClientInterceptor<Audio_V1_StreamAudioRequest, Audio_V1_StreamAudioResponse>]
}

internal enum Audio_V1_AudioServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "AudioService",
    fullName: "audio.v1.AudioService",
    methods: [
      Audio_V1_AudioServiceClientMetadata.Methods.streamAudio,
    ]
  )

  internal enum Methods {
    internal static let streamAudio = GRPCMethodDescriptor(
      name: "StreamAudio",
      path: "/audio.v1.AudioService/StreamAudio",
      type: GRPCCallType.serverStreaming
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Audio_V1_AudioServiceProvider: CallHandlerProvider {
  var interceptors: Audio_V1_AudioServiceServerInterceptorFactoryProtocol? { get }

  func streamAudio(request: Audio_V1_StreamAudioRequest, context: StreamingResponseCallContext<Audio_V1_StreamAudioResponse>) -> EventLoopFuture<GRPCStatus>
}

extension Audio_V1_AudioServiceProvider {
  internal var serviceName: Substring {
    return Audio_V1_AudioServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "StreamAudio":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Audio_V1_StreamAudioRequest>(),
        responseSerializer: ProtobufSerializer<Audio_V1_StreamAudioResponse>(),
        interceptors: self.interceptors?.makeStreamAudioInterceptors() ?? [],
        userFunction: self.streamAudio(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Audio_V1_AudioServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Audio_V1_AudioServiceServerInterceptorFactoryProtocol? { get }

  func streamAudio(
    request: Audio_V1_StreamAudioRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Audio_V1_StreamAudioResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Audio_V1_AudioServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Audio_V1_AudioServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Audio_V1_AudioServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Audio_V1_AudioServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "StreamAudio":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Audio_V1_StreamAudioRequest>(),
        responseSerializer: ProtobufSerializer<Audio_V1_StreamAudioResponse>(),
        interceptors: self.interceptors?.makeStreamAudioInterceptors() ?? [],
        wrapping: { try await self.streamAudio(request: $0, responseStream: $1, context: $2) }
      )

    default:
      return nil
    }
  }
}

internal protocol Audio_V1_AudioServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'streamAudio'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStreamAudioInterceptors() -> [ServerInterceptor<Audio_V1_StreamAudioRequest, Audio_V1_StreamAudioResponse>]
}

internal enum Audio_V1_AudioServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "AudioService",
    fullName: "audio.v1.AudioService",
    methods: [
      Audio_V1_AudioServiceServerMetadata.Methods.streamAudio,
    ]
  )

  internal enum Methods {
    internal static let streamAudio = GRPCMethodDescriptor(
      name: "StreamAudio",
      path: "/audio.v1.AudioService/StreamAudio",
      type: GRPCCallType.serverStreaming
    )
  }
}
